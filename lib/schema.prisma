// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  role          Role      @default(GENERAL)
  hospitalId    String?
  hospital      Hospital? @relation(fields: [hospitalId], references: [id])
  orders        Order[]
  reviews       Review[]
  notifications Notification[]
  productRequests ProductRequest[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([hospitalId])
}

enum Role {
  GENERAL
  HOSPITAL
  ADMIN
}

// Hospital model
model Hospital {
  id            String    @id @default(cuid())
  name          String
  address       String
  city          String
  postalCode    String
  email         String
  phone         String
  isActive      Boolean   @default(true)
  autoSchedule  Boolean   @default(false)
  openTime      String    @default("09:00")
  closeTime     String    @default("18:00")
  users         User[]
  products      HospitalProduct[]
  orders        Order[]
  events        Event[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Product model
model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  price           Float
  discountedPrice Float?
  category        String
  imageUrl        String
  stock           Int
  isActive        Boolean   @default(true)
  hospitals       HospitalProduct[]
  orderItems      OrderItem[]
  reviews         Review[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Junction table for Hospital-Product relationship
model HospitalProduct {
  hospitalId      String
  hospital        Hospital @relation(fields: [hospitalId], references: [id])
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  isDisplayed     Boolean  @default(true)
  customPrice     Float?
  customDiscount  Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@id([hospitalId, productId])
  @@index([hospitalId])
  @@index([productId])
}

// Order model
model Order {
  id                 String        @id @default(cuid())
  userId             String
  user               User          @relation(fields: [userId], references: [id])
  hospitalId         String
  hospital           Hospital      @relation(fields: [hospitalId], references: [id])
  status             OrderStatus   @default(PENDING)
  items              OrderItem[]
  subtotal           Float
  shippingCost       Float
  tax                Float
  total              Float
  paymentMethod      PaymentMethod
  paymentStatus      PaymentStatus @default(PENDING)
  deliveryMethod     DeliveryMethod
  deliveryAddress    String
  specialInstructions String?
  reviews            Review[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([userId])
  @@index([hospitalId])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  productName String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DeliveryMethod {
  MOTORCYCLE
  COURIER
}

// Review model
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([orderId])
}

// Event model for promotions and announcements
model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  hospitalId  String?
  hospital    Hospital? @relation(fields: [hospitalId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([hospitalId])
}

// Notification model
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  linkUrl   String?
  createdAt DateTime         @default(now())

  @@index([userId])
}

enum NotificationType {
  ORDER
  PROMOTION
  SYSTEM
  EVENT
}

// Product Request model
model ProductRequest {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  hospitalId  String
  productName String
  description String?
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  FULFILLED
}

